#!/bin/bash
echo "Pre-commit script running..."

# !UNCOMMENT THIS AFTER CLONE FROM TEMPLATE!

NPM_INSTALL="bun i -g pnpm && pnpm i"
# LINTER="pnpm run lint"
BUILDER="pnpm run build"
# TESTER="pnpm run test"
# TYPE_CHECK="pnpm run test:types"
FIX_EOL=${eolConverter:-"node_modules/.bin/eolConverter"}

if [ ! -f "$FIX_EOL" ]; then
    echo "FIX EOL NOT FOUND!"
    pnpm i -D eol-converter-cli
fi

if ! command -v action-validator >/dev/null; then
    echo "action-validator is not installed."
    echo "Installation instructions: https://github.com/mpalmer/action-validator"
    pnpm install -g @action-validator/core @action-validator/cli --save-dev
    exit 1
fi
echo "Running pre-commit hook for GitHub Actions: https://github.com/mpalmer/action-validator"
scan_count=0
for action in $(git diff --cached --name-only --diff-filter=ACM | grep -E '^\.github/(workflows|actions)/.*\.ya?ml$'); do
    if action-validator "$action"; then
        echo "‚úÖ $action"
    else
        echo "‚ùå $action"
        exit 1
    fi
    scan_count=$((scan_count+1))
done
echo "action-validator scanned $scan_count GitHub Actions and found no errors!"

echo "Installing pnpm..."
eval $NPM_INSTALL

# !TODO: @FATIH LINTER GOT MEMORY ERROR
# echo "linting..."
# eval $LINTER
# linter_exit_code=$?

# if [ $linter_exit_code -ne 0 ]; then
#     echo "‚ùå Linter errors have occurred ü§¶‚Äç‚ôÇÔ∏è"
#     exit 1
# else
#     echo "‚úî Linter and Stylelint did not find any errors üêõ"
# fi

build_exit_code=1
echo "build..."
eval $BUILDER
build_exit_code=$?

if [ $build_exit_code -ne 0 ]; then
    echo "‚ùå Ooopps build failed, check your code pls"
    exit 1
else
    echo "‚úî Build Success! Nice JOB!"
fi

# !TODO: @FATIH TYPE CHECK GOT MEMORY ERROR
# type checking
# type_check=1
# echo "testing..."
# eval $TYPE_CHECK
# type_check=$?

# if [ $type_check -ne 0 ]; then
#     echo "‚ùå Ooopps type_check failed, check your code pls"
#     exit 1
# else
#     echo "‚úî type_check Success! Nice JOB!"
# fi

# tester_exit_code=1
# echo "testing..."
# eval $TESTER
# tester_exit_code=$?

# if [ $tester_exit_code -ne 0 ]; then
# 	echo "‚ùå Ooopps test failed, check your code pls"
# 	exit 1
# else
# 	echo "‚úî Test Success! Nice JOB!"
# fi

COMMIT_FILES=$(git diff --diff-filter=ACMRT --cached --name-only | grep '\.jsx\|\.js\|\.ts\|\.tsx\?$')

# Prevent ESLint help message if no COMMIT_FILES matched
if [[ $COMMIT_FILES = "" ]]; then
    git add .
    exit 0
fi

$FIX_EOL lf $COMMIT_FILES
$FIX_EOL lf '**/*.env'

git add -f $COMMIT_FILES

exit 0
